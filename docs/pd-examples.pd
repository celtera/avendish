#N canvas 1133 254 1258 626 12;
#X obj 34 92 avnd_addition;
#X floatatom 34 64 5 0 0 0 - - - 0;
#X floatatom 122 64 5 0 0 0 - - - 0;
#X obj 359 248 avnd_lowpass;
#X obj 359 338 dac~;
#X msg 359 121 Weight \$1;
#X obj 362 90 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 384 148 phasor~ 200;
#X obj 385 213 avnd_persample_1;
#X msg 501 159 Gain 10;
#X msg 501 182 Gain 50;
#X msg 502 137 Gain 1;
#X obj 853 66 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 853 124 print;
#X obj 853 94 avnd_init 456 yeah;
#X obj 846 315 avnd_messages;
#X msg 846 203 member 1 3 foo;
#X msg 870 265 lambda_function;
#X msg 860 235 function 100;
#X obj 819 290 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 846 344 print;
#X text 355 19 In pd \, multi-channel must be handled by hand :-D still \, notice that Lowpass.hpp implements per-buffer processing while PerSampleProcessor.hpp processes per-sample.;
#X obj 850 471 avnd_callback;
#X floatatom 915 438 5 0 0 0 - - - 0;
#X msg 850 438 work;
#X floatatom 850 504 5 0 0 0 - - - 0;
#X floatatom 938 505 5 0 0 0 - - - 0;
#X obj 383 289 avnd_helpers_lowpass;
#X obj 31 273 avnd_random;
#X obj 31 245 metro 100;
#X obj 31 218 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X floatatom 31 299 5 0 0 0 - - - 0;
#X text 396 313 Helper types allow the exact same thing with a simpler C++ code, f 31;
#X floatatom 34 125 5 0 0 0 - - - 0;
#X obj 32 518 avnd_poles;
#X msg 130 440 length 20;
#X msg 130 465 range 1;
#X msg 131 489 sigma 0.01;
#X obj 32 464 metro 100;
#X obj 32 440 loadbang;
#X obj 35 412 hsl 162 19 -4 4 0 0 empty empty empty -2 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X listbox 30 542 50 0 0 0 - - - 0;
#X text 28 348 Helpers/Poles.hpp: Any data type that matches the std:: API works. Here we use boost::vector instead of std::vector, f 33;
#X text 27 179 Raw/Random.hpp: showcases a basic message generator, f 28;
#X text 28 25 Raw/Addition.hpp: showcases a basic message processor, f 28;
#X text 850 25 Raw/Init.hpp: Example of handling init arguments;
#X text 848 169 Helpers/Messages.hpp: Example of handling various messages;
#X text 849 396 Raw/Callbacks.hpp: Example of handling callbacks;
#X msg 503 113 Gain 0;
#X obj 521 486 avnd_variant, f 17;
#X floatatom 637 425 5 0 0 0 - - - 0;
#X floatatom 520 428 5 0 0 0 - - - 0;
#X floatatom 527 514 5 0 0 0 - - - 0;
#X floatatom 644 515 5 0 0 0 - - - 0;
#X symbolatom 521 546 10 0 0 0 - - - 0;
#X symbolatom 637 547 10 0 0 0 - - - 0;
#X msg 522 454 symbol x;
#X msg 637 456 symbol y;
#X text 516 383 Raw/Variant.hpp: Handling polymorphic input types;
#X connect 0 0 33 0;
#X connect 1 0 0 0;
#X connect 2 0 0 1;
#X connect 3 0 4 0;
#X connect 5 0 3 0;
#X connect 5 0 27 0;
#X connect 6 0 5 0;
#X connect 7 0 8 0;
#X connect 8 0 3 0;
#X connect 8 0 27 0;
#X connect 9 0 8 0;
#X connect 10 0 8 0;
#X connect 11 0 8 0;
#X connect 12 0 14 0;
#X connect 14 0 13 0;
#X connect 15 0 20 0;
#X connect 16 0 15 0;
#X connect 17 0 15 0;
#X connect 18 0 15 0;
#X connect 19 0 15 0;
#X connect 22 0 25 0;
#X connect 22 1 26 0;
#X connect 23 0 22 0;
#X connect 24 0 22 0;
#X connect 27 0 4 1;
#X connect 28 0 31 0;
#X connect 29 0 28 0;
#X connect 30 0 29 0;
#X connect 34 0 41 0;
#X connect 35 0 34 0;
#X connect 36 0 34 0;
#X connect 37 0 34 0;
#X connect 38 0 34 0;
#X connect 39 0 38 0;
#X connect 40 0 34 0;
#X connect 48 0 8 0;
#X connect 49 0 52 0;
#X connect 49 0 54 0;
#X connect 49 1 53 0;
#X connect 49 1 55 0;
#X connect 50 0 49 1;
#X connect 51 0 49 0;
#X connect 56 0 49 0;
#X connect 57 0 49 1;

/* SPDX-License-Identifier: GPL-3.0-or-later */

// clang-format off
#include <@AVND_MAIN_FILE@>
#include <avnd/binding/max/audio_processor.hpp>
#include <avnd/binding/max/message_processor.hpp>
#include <avnd/binding/max/configure.hpp>
#include <avnd/binding/max/jitter_processor.hpp>
#include "commonsyms.h"
using type = decltype(avnd::configure<max::config, @AVND_MAIN_CLASS@>())::type;
// clang-format on

extern "C" AVND_EXPORTED_SYMBOL void ext_main(void* r)
{
  common_symbols_init();

  []<typename T = type> {
    if constexpr(
        avnd::monophonic_audio_processor<T> || avnd::polyphonic_audio_processor<T>)
    {
      // If we're an audio effect, make a type with the whole DSP stuff
      static const max::audio_processor_metaclass<T> instance{};
    }
    else if constexpr(avnd::matrix_input_introspection<T>::size > 0
                   || avnd::matrix_output_introspection<T>::size > 0
                   )
    {
      static const max::jitter_processor_metaclass<T> instance{};
    }
    else
    {
      // Simpler case which just processes messages
      static const max::message_processor_metaclass<T> instance{};
    }
  }();
}

